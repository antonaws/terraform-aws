apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    meta.helm.sh/release-name: slurm
    meta.helm.sh/release-namespace: slurm
  creationTimestamp: "2025-03-22T05:53:08Z"
  generation: 1
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: slurm-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: slurmctld
    app.kubernetes.io/version: "24.05"
    helm.sh/chart: slurm-0.1.0
  name: slurm-controller
  namespace: slurm
  resourceVersion: "30395"
  uid: b37c841e-bfda-4faa-8169-f6cc80210218
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: slurm-controller
      app.kubernetes.io/name: slurmctld
  serviceName: slurm-controller
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: slurmctld
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: slurm-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: slurmctld
        app.kubernetes.io/version: "24.05"
        helm.sh/chart: slurm-0.1.0
    spec:
      automountServiceAccountToken: false
      containers:
      - image: ghcr.io/slinkyproject/slurmctld:24.05-ubuntu-24.04
        imagePullPolicy: IfNotPresent
        name: slurmctld
        ports:
        - containerPort: 6817
          name: slurmctld
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - scontrol
            - ping
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          runAsGroup: 401
          runAsNonRoot: true
          runAsUser: 401
        startupProbe:
          exec:
            command:
            - scontrol
            - ping
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/slurm
          name: etc-slurm
        - mountPath: /var/run
          name: run
        - mountPath: /run/slurmctld
          name: authsocket
        - mountPath: /var/spool/slurmctld
          name: statesave
      - command:
        - bash
        - -c
        - "#!/usr/bin/env bash\n# SPDX-FileCopyrightText: Copyright (C) SchedMD LLC.\n#
          SPDX-License-Identifier: Apache-2.0\n\nset -euo pipefail\n\n# Assume env
          contains:\n# SLURM_USER - username or UID\n\nSLURM_MOUNT=/mnt/slurm\nSLURM_DIR=/mnt/etc/slurm\nINTERVAL=30\nINIT_RECONFIGURE=false\n\nfunction
          reconfigure() {\n\tlocal rsync_cmd='rsync -vaLrzPci --delete --include=\"*.conf\"
          --include=\"prolog-*\" --include=\"epilog-*\" --exclude=\"*\" \"${SLURM_MOUNT}/\"
          \"${SLURM_DIR}\"'\n\n\tif [ -z \"$(eval \"$rsync_cmd --dry-run | grep '\\./'\")\"
          ] && $INIT_RECONFIGURE; then\n\t\treturn\n\tfi\n\n\t# Sync Slurm config
          files, ignore all other files\n\teval \"$rsync_cmd\"\n\tfind \"${SLURM_DIR}\"
          -type f -name \"*.conf\" -print0 | xargs -0r chown -v \"${SLURM_USER}:${SLURM_USER}\"\n\tfind
          \"${SLURM_DIR}\" -type f -name \"*.conf\" -print0 | xargs -0r chmod -v 644\n\tfind
          \"${SLURM_DIR}\" -type f -regextype posix-extended -regex \"^.*/(pro|epi)log-.*$\"
          -print0 | xargs -0r chown -v \"${SLURM_USER}:${SLURM_USER}\"\n\tfind \"${SLURM_DIR}\"
          -type f -regextype posix-extended -regex \"^.*/(pro|epi)log-.*$\" -print0
          | xargs -0r chmod -v 755\n\n\t# Config files are not in expected directory
          `/etc/slurm`\n\texport SLURM_CONF=\"$SLURM_MOUNT/slurm.conf\"\n\n\t# Issue
          cluster reconfigure request\n\techo \"[$(date)] Reconfiguring Slurm\"\n\tscontrol
          reconfigure\n\tINIT_RECONFIGURE=true\n}\n\nfunction main() {\n\techo \"[$(date)]
          Start Slurm config change polling\"\n\twhile true; do\n\t\treconfigure\n\t\tsleep
          \"$INTERVAL\"\n\tdone\n}\nmain\n"
        env:
        - name: SLURM_USER
          value: slurm
        image: ghcr.io/slinkyproject/slurmctld:24.05-ubuntu-24.04
        imagePullPolicy: IfNotPresent
        name: reconfigure
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/slurm
          name: slurm-config
        - mountPath: /mnt/etc/slurm
          name: etc-slurm
        - mountPath: /run/slurmctld
          name: authsocket
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - bash
        - -c
        - "#!/usr/bin/env bash\n# SPDX-FileCopyrightText: Copyright (C) SchedMD LLC.\n#
          SPDX-License-Identifier: Apache-2.0\n\nset -euo pipefail\n\n# Assume env
          contains:\n# SLURM_USER - username or UID\n\nfunction init::common() {\n\tlocal
          dir\n\n\tdir=/var/spool/slurmd\n\tmkdir -p \"$dir\"\n\tchown -v \"${SLURM_USER}:${SLURM_USER}\"
          \"$dir\"\n\tchmod -v 700 \"$dir\"\n\n\tdir=/var/spool/slurmctld\n\tmkdir
          -p \"$dir\"\n\tchown -v \"${SLURM_USER}:${SLURM_USER}\" \"$dir\"\n\tchmod
          -v 700 \"$dir\"\n}\n\nfunction init::slurm() {\n\tSLURM_MOUNT=/mnt/slurm\n\tSLURM_DIR=/mnt/etc/slurm\n\n\t#
          Workaround to ephemeral volumes not supporting securityContext\n\t# https://github.com/kubernetes/kubernetes/issues/81089\n\n\t#
          Copy Slurm config files, secrets, and scripts\n\tmkdir -p \"$SLURM_DIR\"\n\tfind
          \"${SLURM_MOUNT}\" -type f -name \"*.conf\" -print0 | xargs -0r cp -vt \"${SLURM_DIR}\"\n\tfind
          \"${SLURM_MOUNT}\" -type f -name \"*.key\" -print0 | xargs -0r cp -vt \"${SLURM_DIR}\"\n\n\t#
          Set general permissions and ownership\n\tfind \"${SLURM_DIR}\" -type f -print0
          | xargs -0r chown -v \"${SLURM_USER}:${SLURM_USER}\"\n\tfind \"${SLURM_DIR}\"
          -type f -name \"*.conf\" -print0 | xargs -0r chmod -v 644\n\tfind \"${SLURM_DIR}\"
          -type f -name \"*.key\" -print0 | xargs -0r chmod -v 600\n\n\t# Inject secrets
          into certain config files\n\tlocal dbd_conf=\"slurmdbd.conf\"\n\tif [[ -f
          \"${SLURM_MOUNT}/${dbd_conf}\" ]]; then\n\t\techo \"Injecting secrets from
          environment into: ${dbd_conf}\"\n\t\trm -f \"${SLURM_DIR}/${dbd_conf}\"\n\t\tenvsubst
          <\"${SLURM_MOUNT}/${dbd_conf}\" >\"${SLURM_DIR}/${dbd_conf}\"\n\t\tchown
          -v \"${SLURM_USER}:${SLURM_USER}\" \"${SLURM_DIR}/${dbd_conf}\"\n\t\tchmod
          -v 600 \"${SLURM_DIR}/${dbd_conf}\"\n\tfi\n\n\t# Display Slurm directory
          files\n\tls -lAF \"${SLURM_DIR}\"\n}\n\nfunction main() {\n\tinit::common\n\tinit::slurm\n}\nmain\n"
        env:
        - name: SLURM_USER
          value: slurm
        image: ghcr.io/slinkyproject/slurmctld:24.05-ubuntu-24.04
        imagePullPolicy: IfNotPresent
        name: init
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/slurm
          name: slurm-config
        - mountPath: /mnt/etc/slurm
          name: etc-slurm
        - mountPath: /var/spool/slurmctld
          name: statesave
      - command:
        - bash
        - -c
        - "#!/usr/bin/env bash\n# SPDX-FileCopyrightText: Copyright (C) SchedMD LLC.\n#
          SPDX-License-Identifier: Apache-2.0\n\nset -euo pipefail\n\n# Assume env
          contains:\n# HOST - Network host\n\nDELAY=\"1s\"\n\nuntil ping -c1 \"${HOST}\";
          do\n\tsleep \"${DELAY}\"\ndone\n"
        env:
        - name: HOST
          value: slurm-accounting
        image: ghcr.io/slinkyproject/slurmctld:24.05-ubuntu-24.04
        imagePullPolicy: IfNotPresent
        name: wait
        resources: {}
        securityContext:
          runAsGroup: 401
          runAsNonRoot: true
          runAsUser: 401
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/slurm
          name: slurm-config
        - mountPath: /mnt/etc/slurm
          name: etc-slurm
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        sysctls:
        - name: net.ipv4.ping_group_range
          value: 401 401
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir:
          medium: Memory
        name: etc-slurm
      - emptyDir: {}
        name: run
      - emptyDir: {}
        name: authsocket
      - name: slurm-config
        projected:
          defaultMode: 384
          sources:
          - configMap:
              name: slurm
          - secret:
              name: slurm-auth-key
          - secret:
              name: slurm-jwt-key
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: slurm-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: slurmctld
        app.kubernetes.io/version: "24.05"
        helm.sh/chart: slurm-0.1.0
      name: statesave
      namespace: slurm
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi
      storageClassName: fsx
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  availableReplicas: 1
  collisionCount: 0
  currentReplicas: 1
  currentRevision: slurm-controller-8dc659b6f
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updateRevision: slurm-controller-8dc659b6f
  updatedReplicas: 1
